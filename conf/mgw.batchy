# Batchy
#
# Copyright (C) 2019 by its authors (See AUTHORS)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

import binascii
import itertools
import scapy.all as scapy
import socket
import struct
import pprint


mode = get_arg('mode', 'RTC', str)
rounds = get_arg('rounds', 100, int)
control_period = get_arg('control_period', 0.1, float)
controller = get_arg('controller', 'projgradient', str)
src_worker_num = get_arg('src_worker_num', 1, int)

fib_size = get_arg('fib_size', 5000, int)
user_num = get_arg('user_num', 3, int)

# user rate-limits [bps] and delay bounds
rate_ul = get_arg('rate_ul', 1_000_000_000, int)
rate_dl = get_arg('rate_dl', 2_000_000_000, int)
delay_ul = get_arg('delay_ul', 15_000_000, int)
delay_dl = get_arg('delay_dl', 20_000_000, int)

# user bypass parameters
t0_dl = get_arg('t0_dl', 2, int)
t1_dl = get_arg('t1_dl', 1, int)
t0_ul = get_arg('t0_ul', 2, int)
t1_ul = get_arg('t1_ul', 1, int)

# if set pl is split to ingress,egress and per-user tasks
multitask = 'true' in get_arg('multitask', 'false', str)


def aton(ip): return socket.inet_aton(ip)


def mac_from_str(s, mode='bytes'):
    ret = binascii.unhexlify(s.replace(':', ''))
    if mode == 'int':
        ret = int.from_bytes(ret, byteorder='big')
    return ret


def gen_packet(proto, src_ip, dst_ip, src_port=10001, dst_port=10002,
               vxlan_id=None):
    eth = scapy.Ether(src='02:1e:67:9f:4d:ae', dst='ae:34:2e:16:b8:cd')
    ip = scapy.IP(src=src_ip, dst=dst_ip)
    udp = proto(sport=src_port, dport=dst_port)
    payload = 'helloworld'
    if vxlan_id:
        vxeth = scapy.Ether(src='02:1d:61:3f:4d:ae', dst=gw['mac'], type=0x0800)
        vx_ip = scapy.IP(src=src_ip, dst=gw['ip'])
        vxudp = scapy.UDP(sport=4789, dport=4789)
        vxlan = scapy.VXLAN(vni=vxlan_id, flags=0x08)
        pkt = vxeth/vx_ip/vxudp/vxlan/eth/ip/udp/payload
    else:
        pkt = eth/ip/udp/payload
    return bytes(pkt)


def get_octets(seq, offset=11, last=1):
    return (int(seq / 64516) + offset,
            int(seq % 64516 / 254),
            (seq % 254) + 1,
            last)


def get_ip(seq, offset=11, last=1):
    return '.'.join(map(str, get_octets(seq, offset, last)))


vxlan_size = len(scapy.Ether()/scapy.VXLAN()/scapy.IP()/scapy.UDP())

gw = {'ip': '1.10.100.1',
      'mac': 'ac:dc:ac:dc:02:9a'}

em_t0 = 2
em_t1 = 1

ip_t0 = 2
ip_t1 = 1

users = []
for i in range(user_num):
    new_user = {
        'name': f'user_{i}',
        'id': i,
        'delay_slo': {'ul': delay_ul * (i+1) if i < user_num-1 else
                      settings.DEFAULT_DELAY_BOUND,
                      'dl': delay_dl * (i+1) if i < user_num-1 else
                      settings.DEFAULT_DELAY_BOUND},
        'rate_slo': {'ul': {'bit': rate_ul},
                     'dl': {'bit': rate_dl}},
        'path': {'ul': [], 'dl': []},
        'task': {'ul': None, 'dl': None},
        'flow': {'ul': None, 'dl': None},
        'ip': {'ul': get_ip(i, offset=10), 'dl': get_ip(i, offset=10)},
        'source_params': {
            'ul': {
                'ts_offset': settings.FLOW_TIMESTAMP_OFFSET + vxlan_size,
                'ts_offset_diff': -vxlan_size,
                'weight': min(int(float(2**i)), 8),
                'templates': [gen_packet(scapy.UDP,
                                         get_ip(i, offset=10),
                                         get_ip(i, offset=100),
                                         dst_port=1000 + i,
                                         vxlan_id=i + 1)]},
            'dl': {
                'ts_offset': settings.FLOW_TIMESTAMP_OFFSET,
                'ts_offset_diff': +vxlan_size,
                'weight': min(int(float(2**i)), 8),
                'templates': [gen_packet(scapy.UDP,
                                         get_ip(i, offset=100),
                                         get_ip(i, offset=10),
                                         dst_port=1000 + i)]},
        }
    }
    users.append(new_user)

pprint.pprint(users)

fib = []
for i in range(user_num):
    dl_entry = {
        'prefix': get_ip(i, offset=10, last=0),
        'prefixlen': 24,
        'ogate': 1,
    }
    fib.append(dl_entry)
    ul_entry = {
        'prefix': get_ip(i, offset=100, last=0),
        'prefixlen': 24,
        'ogate': 0,
    }
    fib.append(ul_entry)
for i in range(fib_size - 2 * user_num):
    dummy_entry = {
        'prefix': get_ip(i, offset=150, last=0),
        'prefixlen': 24,
        'ogate': i % 2,
    }
    fib.append(dummy_entry)


# SET UP PIPELINE
# Step 1: create worker
w0 = batchy.add_worker('w0')

# Step 2: add task to worker
if multitask:
    ti = w0.add_task('ingress', type=mode)
    te = w0.add_task('egress', type=mode)
    mtype = 'ingress'
else:
    ti = te = w0.add_task('task0', type=mode)
    mtype = 'internal'

for user in users:
    for dir in ('dl', 'ul'):
        if multitask:
            user['task'][dir] = w0.add_task(f'user{user["id"]}_{dir}',
                                            type=mode)
        else:
            user['task'][dir] = ti

# Step 3: add modules to task, set internal pipeline
mac_table = ti.add_module(ExactMatch(name='mac_table',
                                     fields=[{'offset': 0, 'num_bytes': 6}]),
                          type='ingress')
mac_table.module.add(fields=[{'value_bin': mac_from_str('ae:34:2e:16:b8:cd')}],
                     gate=0)
mac_table.module.set_default_gate(gate=0)

type_check = ti.add_module(ExactMatch(name='type_check',
                                      fields=[{'offset': 12, 'num_bytes': 2}]))
type_check.module.add(fields=[{'value_bin': struct.pack('!H', 0x0800)}], gate=0)
type_check.module.set_default_gate(gate=0)
mac_table.connect(type_check)

dir_selector = ti.add_module(ExactMatch(name='dir_selector',
                                        fields=[{'offset': 30, 'num_bytes': 4},    # dst IP
                                                {'offset': 23, 'num_bytes': 1},    # IP proto
                                                {'offset': 36, 'num_bytes': 2}]),  # dst port
                             T_0=em_t0, T_1=em_t1, controlled=False)
dir_selector.module.add(fields=[{'value_bin': aton(gw['ip'])},
                                {'value_bin': struct.pack('B', 17)},
                                {'value_bin': struct.pack('!H', 4789)}],
                        gate=1) # uplink
dir_selector.module.set_default_gate(gate=0) # downlink
type_check.connect(dir_selector)

dl_ue_selector = ti.add_module(ExactMatch(name='dl_ue_selector',
                                          fields=[{'offset': 30, 'num_bytes': 4}]), # dst IP
                               T_0=em_t0, T_1=em_t1, controlled=False)
dl_ue_selector.module.set_default_gate(gate=0)
dir_selector.connect(dl_ue_selector, ogate=0)

vxlan_decap = ti.add_module(VXLANDecap(name='vxlan_decap'))
ul_ue_selector = ti.add_module(ExactMatch(name='ul_ue_selector',
                                          fields=[{'offset': 26, 'num_bytes': 4}]), # src IP
                               T_0=em_t0, T_1=em_t1, controlled=False)
ul_ue_selector.module.set_default_gate(gate=0)
dir_selector.connect(vxlan_decap, ogate=1)
vxlan_decap.connect(ul_ue_selector)

common_path_dl = [mac_table, type_check, dir_selector, dl_ue_selector]
common_path_ul = [mac_table, type_check, dir_selector, vxlan_decap, ul_ue_selector]

ttl = te.add_module(UpdateTTL(name=f'update_ttl'), type=mtype)
l3 = te.add_module(IPLookup(name='L3', max_rules=fib_size),
                   T_0=ip_t0, T_1=ip_t1)
for entry in fib:
    l3.module.add(prefix=entry['prefix'],
                  prefix_len=entry['prefixlen'],
                  gate=entry['ogate'])
ttl.connect(l3)

for user in users:
    for dir in ('dl', 'ul'):
        common_path = globals().get(f'common_path_{dir}').copy()
        t = user['task'][dir]
        # tin = t.add_module(Bypass(name=f'bp_in_{user["id"]}_{dir}'),
        #                    type=mtype)
        bp_per_batch = globals().get(f't0_{dir}')
        bp_per_packet = globals().get(f't1_{dir}')
        bp = t.add_module(Bypass(name=f'{dir}_{user["name"]}_bp',
                                 cycles_per_batch=bp_per_batch,
                                 cycles_per_packet=bp_per_packet),
                          T_0=bp_per_batch/settings.BYPASS_RATIO,
                          T_1=bp_per_packet/settings.BYPASS_RATIO)
        selector = globals().get(f'{dir}_ue_selector')
        selector.module.add(fields=[{'value_bin': aton(user['ip'][dir])}],
                            gate=user['id'])
        if dir == 'dl':
            md_attrs = [{'name': 'tun_id', 'size': 4,
                         'value_int': user['id']},
                        {'name': 'tun_ip_src', 'size': 4,
                         'value_bin': aton(gw['ip'])},
                        {'name': 'tun_ip_dst', 'size': 4,
                         'value_bin': aton(user['ip']['dl'])}]
            set_md = ti.add_module(SetMetadata(name=f'setmd_dl_{user["id"]}',
                                               attrs=md_attrs))
            vxlan_encap = ti.add_module(VXLANEncap(name=f'vxlan_encap_{user["id"]}',
                                                   dstport=1000 + user['id']))
            ip_encap = ti.add_module(IPEncap(name=f'ip_encap_{user["id"]}'))
            eth_encap = ti.add_module(EtherEncap(name=f'ether_encap_{user["id"]}'))

            selector.connect(bp, ogate=user['id'])
            bp.connect(set_md)
            set_md.connect(vxlan_encap)
            vxlan_encap.connect(ip_encap)
            ip_encap.connect(eth_encap)
            eth_encap.connect(ttl)
            # common_path.extend([bp, set_md, vxlan_encap, ip_encap, eth_encap])
            path = [bp, set_md, vxlan_encap, ip_encap, eth_encap]
        else:
            selector.connect(bp, ogate=user['id'])
            bp.connect(ttl)
            path = [bp]
        user['path'][dir] = [{'task': ti, 'path': common_path},
                             {'task': user['task'][dir], 'path': path}]


nhops = {'ul': {'smac': 'aa:bb:bb:aa:ac:dc',
                'dmac': 'ee:dd:dd:aa:01:01',
                'ogate': 0,
                'path': None},
         'dl': {'smac': 'aa:bb:bb:aa:ac:dc',
                'dmac': 'ee:dd:dd:aa:02:02',
                'ogate': 1,
                'path': None}}
for dir, cfg in nhops.items():
    src_mac = mac_from_str(cfg['smac'], mode='int')
    dst_mac = mac_from_str(cfg['dmac'], mode='int')
    mac = te.add_module(Update(name=f'update_mac_{dir}',
                               fields=[{'offset': 6, 'size': 6,
                                        'value': src_mac},
                                       {'offset': 0, 'size': 6,
                                        'value': dst_mac}]))
    chk = te.add_module(IPChecksum(name=f'ip_checksum_{dir}'))
    flow_demuxer = te.add_module(ExactMatch(name=f'flow_demuxer_{dir}',
                                            fields=[{'offset': 36,
                                                     'num_bytes': 2}]),  # dst port
                                 T_0=em_t0, T_1=em_t1, controlled=False)
    l3.connect(mac, ogate=cfg['ogate'])
    mac.connect(chk)
    chk.connect(flow_demuxer)
    cfg['path'] = [ttl, l3, mac, chk, flow_demuxer]

for user in users:
    for dir in ('dl', 'ul'):
        flow_demuxer = next((m for m in nhops[dir]['path']
                             if m.name == f'flow_demuxer_{dir}'))
        flow_demuxer.module.add(fields=[{'value_bin':
                                         struct.pack('!H', 1000 + user['id'])}],
                                gate=user['id'])
        dmux_bp = te.add_module(Bypass(name=f'demux_bp_{dir}_{user["name"]}'))
        flow_demuxer.connect(dmux_bp, ogate=user['id'])
        user['path'][dir].append({'task': te, 'path': nhops[dir]['path'] + [dmux_bp]})



# Step 4: add flows
for user in users:
    for dir in ('dl', 'ul'):
        if not multitask:
            path = list(itertools.chain(*((v['path'] for v in user['path'][dir]))))
            user['path'][dir] = [{'task': ti, 'path': path}]

        user['flow'][dir] = batchy.add_flow(name=f'{user["name"]}_{dir}',
                                            path=user['path'][dir],
                                            delay_slo=user['delay_slo'][dir],
                                            rate_slo=user['rate_slo'][dir],
                                            source_params=user['source_params'][dir])

# Step 5: add test traffic
for i in range(src_worker_num):
    src_worker_name = f'src_{i}'
    src_worker = batchy.add_worker(src_worker_name)
    for dir in ('dl', 'ul'):
        ts_offset = users[0]['source_params'][dir]['ts_offset']
        batchy.add_bulk_source([f for f in batchy.flows if dir in f.name],
                               src_worker, postfix=dir, ts_offset=ts_offset)

batchy.add_sink()

# Step 6: set controller for worker
controller_name = batchy.resolve_task_controller(controller)
ti.set_controller(controller_name)
if multitask:
    for user in users:
        for dir in ('dl', 'ul'):
            user['task'][dir].set_controller(controller_name)
    te.set_controller(controller_name)

# Step 7: run pipeline
batchy.run(rounds, control_period)
batchy.dump('statistics.txt')
if not multitask:
    batchy.plot('statistics.png')
    # FIXME: Exception: plot: stats size mismatch: 4 <> 12
    #        if multiple tasks exist

#bess.resume_all()
#bess.reset_all()
