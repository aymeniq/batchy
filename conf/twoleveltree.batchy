# Batchy
#
# Copyright (C) 2019 by its authors (See AUTHORS)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

import logging
import time

leaves = get_arg('leaves', 2, int)
weight1 = get_arg('weight1', 1, int)
mode = get_arg('mode', 'RTC', str)
rounds = get_arg('rounds', 100, int)
control_period = get_arg('control_period', 0.1, float)

cycles_per_batch1 = get_arg('cycles_per_batch1', 1000, int)
cycles_per_packet1 = get_arg('cycles_per_packet1', 100, int)
cycles_per_batch = get_arg('cycles_per_batch', 1000, int)
cycles_per_packet = get_arg('cycles_per_packet', 100, int)

delay_bound1 = get_arg('delay_bound1', 22000, int)
packet_bound1 = get_arg('packet_bound1', 1000000,int)
delay_bound = get_arg('delay_bound', 24000, int)
packet_bound = get_arg('packet_bound', 2000000,int)

def rsplit_weight(num_leaves, weight1):
    rsplit_weight = {i: 1.0 for i in range(1, num_leaves)}
    rsplit_weight[0] = float(weight1)
    sum_weight = num_leaves - 1 + weight1 or 1
    rsplit_weight = {k: v/sum_weight for k, v in rsplit_weight.items()}
    return rsplit_weight


# Step 1: create worker
w0 = batchy.add_worker('w0')

# Step 2: add task to worker
# could also write as:
# t0 = batchy.add_task('task0', worker='w0', type='RTC')
t0 = w0.add_task('task0', type=mode)
# could also add a physical port queue
# port = PMDPort(port_id=0, ...)
# queue = QueueInc(port=port, qid=wid)
# t0 = w0.add_task('task0', queue=queue)

# Step 3: add modules to task, set internal pipeline
# Step 4: add flows: min_rate=0 by default
# currently must follow add_src/add_sink as we set the Timestamp/Measure modules from there
bp_in = t0.add_module(Bypass(name='bp_ingress'),
                      type='ingress')
bp0 = t0.add_module(Bypass(cycles_per_batch=cycles_per_batch1,
                            cycles_per_packet=cycles_per_packet1),
                    cycles_per_batch1 / settings.BYPASS_RATIO,
                    cycles_per_packet1 / settings.BYPASS_RATIO)
r1 = t0.add_module(WeightedRandomSplit(gates_weights=rsplit_weight(leaves, weight1),
                                       drop_rate=0.0))
bp1 = t0.add_module(Bypass(cycles_per_batch=cycles_per_batch1,
                            cycles_per_packet=cycles_per_packet1),
                    cycles_per_batch1 / settings.BYPASS_RATIO,
                    cycles_per_packet1 / settings.BYPASS_RATIO)

bp_in.connect(bp0)
bp0.connect(r1)
r1.connect(bp1)

batchy.add_flow(name='flow0', path=[{'task': t0, 'path':[bp_in, bp0, r1, bp1]}],
                delay_slo=delay_bound1,
                source_params={'rate_limit': {'packet': packet_bound1})

for i in range(1, leaves):
    bp = t0.add_module(Bypass(cycles_per_batch=cycles_per_batch,
                              cycles_per_packet=cycles_per_packet),
                       cycles_per_batch / settings.BYPASS_RATIO,
                       cycles_per_packet / settings.BYPASS_RATIO)
    r1.connect(bp, ogate=i)
    batchy.add_flow(name=f'flow{i}', path=[{'task': t0, 'path':[bp_in, bp0, r1, bp]}],
                    delay_slo=delay_bound1,
                    source_params={'rate_limit': {'packet': packet_bound1})

# Step 5: add test traffic
batchy.add_source(worker=w0)
# or create a new worker for the sources
# batchy.add_source()
batchy.add_sink()

# Step 6: set controller for worker
t0.set_controller('FeasDirTaskController')

# Step 7: run pipeline
batchy.run(rounds, control_period)
batchy.plot('statistics.png')

#bess.resume_all()
#bess.reset_all()
