# Batchy
#
# Copyright (C) 2019 by its authors (See AUTHORS)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# ../bess/bessctl/bessctl -- daemon reset;./batchy.py --bessdir=../bess/   --loglevel=INFO  conf/l2l3simple.batchy rounds=30,extra_acl=True,acl_size=1000,src_worker_num=3,dmz_delay=50000,burst_size=1,bulk_weight=1,dmz_zone_num=4   # double the rate!

import binascii
import random
import re
import scapy.all as scapy
import struct
import pprint


def mac_from_str(s, mode='bytes'):
    ret = binascii.unhexlify(s.replace(':', ''))
    if mode == 'int':
        ret = int.from_bytes(ret, byteorder='big')
    return ret


def gen_packet(proto, src_ip, dst_ip, src_port=10001, dst_port=10002):
    eth = scapy.Ether(src='02:1e:67:9f:4d:ae', dst='ae:34:2e:16:b8:cd')
    ip = scapy.IP(src=src_ip, dst=dst_ip)
    udp = proto(sport=src_port, dport=dst_port)
    payload = 'helloworld'
    pkt = eth/ip/udp/payload
    return bytes(pkt)


def get_octets(seq, offset=11, last=0):
    return (int(seq / 64516) + offset,
            int(seq % 64516 / 254),
            (seq % 254) + 1,
            last)


def populate_l3(module, num_entries=1000, num_ogates=3):
    assert(num_entries < fib_size)
    for i in range(num_entries):
        pfix = '%d.%d.%d.%d' % get_octets(i, 11)
        module.add(prefix=pfix, prefix_len=24,
                   gate=random.randint(0, num_ogates - 1))


def gen_acl_rules(num_entries=1024):
    acl_rules = []
    for i in range(num_entries):
        src_pfix = '%d.%d.%d.%d' % get_octets(i, offset=10)
        dst_pfix = '%d.%d.%d.%d' % get_octets(i, offset=10)
        acl_rules.append(
            {'src_ip': '%s/24' % src_pfix,
             'dst_ip': '%s/24' % dst_pfix,
             'drop': True})
    return acl_rules


mode = get_arg('mode', 'RTC', str)                        # scheduler mode: run-to-completetion
rounds = get_arg('rounds', 100, int)                      # number of control rounds
control_period = get_arg('control_period', 0.1, float)    # length of control period [sec]

fib_size = get_arg('fib_size', 8000, int)                 # number of entries in the FIB
acl_size = get_arg('acl_size', 1000, int)                 # number of entries in the ACLs
group_proc = get_arg('group_proc', 'True')                # whether to apply group processing
extra_acl = get_arg('extra_acl', 'False')                 # whether to add ACLs to the egress/ingress port
burst_size = get_arg('burst_size', 32, int)               # number of packets to generate in each burst
src_worker_num = get_arg('src_worker_num', 1, int)        # number of workers that feed the pipeline with traffic
bulk_weight = get_arg('bulk_weight', 5, int)              # ratio of ingress/egress per dmz traffic
dmz_delay = get_arg('dmz_delay', 100_000, int)            # delay bound for the DMZ flow
dmz_zone_num = get_arg('dmz_zone_num', 1, int)            # number of DMZ zones
dmz_rate_limit = get_arg('dmz_rate_limit', int(1e9), int) # rate limit dmz flow (CBR)

acl_module = globals().get(get_arg('acl', 'DPDKACL'))
port_allow=12345

flow_params = {}
flow_params['ingress'] = {
    'delay_bound': 5_000_000,
    'rate_limit': {'packet': int(1e9)},
    'templates': [gen_packet(scapy.UDP, '10.0.0.3', '10.1.0.1', 102, port_allow)],
    'cidr': '10.1.0.0/24',
    'l3_ogate': 0,
    'weight': bulk_weight,
    'path': [],
    'burst_size': burst_size,
}

flow_params['egress'] = {
    'delay_bound': 5_000_000,
    'rate_limit': {'packet': int(1e9)},
    'templates': [gen_packet(scapy.UDP, '10.0.0.2', '10.0.1.1', 101, port_allow)],
    'cidr': '10.0.1.0/24',
    'l3_ogate': 1,
    'weight': bulk_weight,
    'path': [],
    'burst_size': burst_size,
}

dmz_name = []
for i in range(dmz_zone_num):
    dmz_name.append('dmz:%d' % i)
    flow_params[dmz_name[i]] = {
        'delay_bound': dmz_delay,
        'rate_limit': {'packet': dmz_rate_limit},
        'templates': [gen_packet(scapy.UDP, '10.0.0.1', '10.0.0.%d' % (i+1),
                                 100, port_allow)],
        'cidr': '10.0.0.%d/32' % (i+1),
        'l3_ogate': 2 + i,
        'weight': 1,
        'path': [],
        # 'burst_size': 1,
        'burst_size': burst_size,
    }

# SET UP PIPELINE
# Step 1: create worker
w0 = batchy.add_worker('w0')

# Step 2: add task to worker
t0 = w0.add_task('task0', type=mode)

# Step 3: add modules to task, set internal pipeline
em_t0 = 0  # 117.8135
em_t1 = 0  # 19.1694

# ip_t0 = 100  # 214.683
# ip_t1 = 20   # 40.1546
ip_t0 = 0  # 214.683
ip_t1 = 0   # 40.1546

if acl_module == 'ACL':
    acl_t0 = 1  # 380.9193
    acl_t1 = 1  # 1008.9017
else:
    acl_t0 = 100  # 195.776
    acl_t1 = 15   # 33.087

mac_table = t0.add_module(ExactMatch(name='mac_table',
                                     fields=[{'offset': 0, 'num_bytes': 6}]),
                          type='ingress')

mac_table.module.add(fields=[{'value_bin': mac_from_str('dd:dd:dd:dd:00:01')}],
                     gate=0)
mac_table.module.set_default_gate(gate=0)

type_check = t0.add_module(ExactMatch(name='type_check',
                                      fields=[{'offset': 12, 'num_bytes': 2}]),
                           T_0=em_t0, T_1=em_t1)
type_check.module.add(fields=[{'value_bin': struct.pack("!H", 0x0800)}],
                      gate=0)
type_check.module.set_default_gate(gate=0)
mac_table.connect(type_check)

l3 = t0.add_module(IPLookup(name='L3', max_rules=fib_size),
                   T_0=ip_t0, T_1=ip_t1)
for name in flow_params.keys():
    pfix, pfixlen = flow_params[name]['cidr'].split('/')
    l3.module.add(prefix=pfix,
                  prefix_len=int(pfixlen),
                  gate=flow_params[name]['l3_ogate'])
populate_l3(l3.module, num_ogates=2 + dmz_zone_num, num_entries=1000)
type_check.connect(l3)

dmz_acl_rules = [{'src_ip': '0.0.0.0/0',
                  'dst_ip': '0.0.0.0/0',
                  'ipproto': 17,
                  'dst_port': port_allow,
                  'drop': False}] + gen_acl_rules(acl_size)

dmz_acl = []
for i in range(dmz_zone_num):
    dmz_acl.append(t0.add_module(acl_module(name='DMZ_ACL_%d' % i,
                                            rules=dmz_acl_rules),
                                 T_0=acl_t0, T_1=acl_t1))
    l3.connect(dmz_acl[i], ogate=flow_params[dmz_name[i]]['l3_ogate'])

common_path = [mac_table, type_check, l3]
for name in flow_params.keys():
    flow_params[name]['path'] = common_path.copy()

for i in range(dmz_zone_num):
    flow_params[dmz_name[i]]['path'] += [dmz_acl[i]]

extra_acl_enabled = 'true' in extra_acl.lower()
group_proc_enabled = 'true' in group_proc.lower()

if extra_acl_enabled:
    gress_acl_rules = gen_acl_rules(acl_size)
    for name in ('ingress', 'egress'):
        acl_rules = [{'src_ip': '0.0.0.0/0',
                      'dst_ip': '0.0.0.0/0',
                      'ipproto': 17,
                      'dst_port': port_allow,
                      'drop': False}] + gress_acl_rules
        acl = t0.add_module(acl_module(name='%s_ACL' % name.title(),
                                       rules=acl_rules),
                            T_0=acl_t0, T_1=acl_t1)
        l3.connect(acl, ogate=flow_params[name]['l3_ogate'])
        flow_params[name]['path'].append(acl)

if group_proc_enabled:
    for name in flow_params.keys():
        ttl = t0.add_module(UpdateTTL(name='update_ttl_%s' % name))
        src_mac = mac_from_str('ae:34:2e:16:b8:cd', mode='int')
        smac = t0.add_module(Update(name='update_smac_%s' % name,
                                    fields=[{'offset': 6, 'size': 6,
                                             'value': src_mac}]))
        dst_mac = mac_from_str('ce:ce:ce:ce:00:01', mode='int')
        dmac = t0.add_module(Update(name='update_dmac_%s' % name,
                                    fields=[{'offset': 0, 'size': 6,
                                             'value': dst_mac}]))
        chk = t0.add_module(IPChecksum(name='ip_checksum_%s' % name))
        if name in dmz_name or extra_acl_enabled:
            ogate = 0
        else:
            ogate = flow_params[name]['l3_ogate']
        flow_params[name]['path'][-1].connect(ttl, ogate=ogate)
        ttl.connect(smac)
        smac.connect(dmac)
        dmac.connect(chk)
        flow_params[name]['path'].extend([ttl, smac, dmac, chk])

# append dummy-Bypass modules after L3 to differentiate flows on outports
if not (group_proc_enabled or extra_acl_enabled):
    for name in ('ingress', 'egress'):
        bp = t0.add_module(Bypass())
        flow_params[name]['path'][-1].connect(bp, ogate=flow_params[name]['l3_ogate'])
        flow_params[name]['path'].append(bp)

# Step 4: add flows
flows = {}
for name in flow_params.keys():
    flows[name] = batchy.add_flow(name=name,
                                  path=[{'task': t0, 'path': flow_params[name]['path']}],
                                  delay_slo=flow_params[name]['delay_bound'],
                                  rate_slo=flow_params[name]['rate_limit'],
                                  source_params=flow_params[name])

# Step 5: add test traffic
for i in range(src_worker_num):
    src_worker_name = 'src_%d' % i
    src_worker = batchy.add_worker(src_worker_name)

    # # add the dmz flows: qos
    # for i in range(dmz_zone_num):
    #     flows[dmz_name[i]].add_source(src_worker)

    # add bulk source for ingress and egress
    # batchy.add_bulk_source([flows['ingress'], flows['egress']], src_worker)

    # all flows are bulk
    batchy.add_bulk_source([flows[name] for name in flow_params.keys()], src_worker)

batchy.add_sink()

# Step 6: set controller for worker
t0.set_controller('FeasDirTaskController')

# Step 7: run pipeline
batchy.run(rounds, control_period)
batchy.plot('statistics_feas_dir.png')
batchy.dump('statistics_feas_dir.txt')

# batchy.erase_stat()
# t0.set_controller('NullTaskController')
# batchy.run(rounds, control_period)
# batchy.plot('statistics_null.png')
# batchy.dump('statistics_null.txt')

# batchy.erase_stat()
# t0.set_controller('MaxTaskController')
# batchy.run(rounds, control_period)
# batchy.plot('statistics_max.png')
# batchy.dump('statistics_max.txt')

#bess.resume_all()
#bess.reset_all()
